++x : 증가하고 표시 ( 선 증가 후 표시)
x++ : 표시하고 증가 (선 표시 후 증가)

증감연산이 단독으로 표시되는 경우는 전위 후위연산 차이가 없음

관계와 논리연산자중 우선권은 관계연산자

! ==> 논리값의 부정

조건(3항) 연산자
형식 : 조건식 ? 식1 : 식2 
형식 : 조건식 ? 식1 : 식2

컴파일 : 고급언어를 기계어로 바꾸는 과정

링킹 : 사용자가 생성한 오브젝트파일들과 라이브러리함수를 결합하여 실행파일생성

전처리작업 : 전처리지시자가 전처리문을 해석하여 전처리 후 코드를 만들어냄

지역변수 : 자신이 선언된 함수에서만 사용
전역변수 : 
가인수변수는 어떤것이 와도 상관x

//rety-type : 부모함수에게 반환할 자료형을 주는것, 리턴타입의 디폴트 값은 int임
void는 권장사항
//param list : 부모함수의 실인수를 저장할 변수리스트
rety-type 함수명(param list) ==> (반환할 타입) 함수명 (받는 변수 및 타입)

return : 나를 부른 부모함수에게 즉시 복귀함 ==> 인터럽트

return value : 함수명 앞에 리턴벨류 타입을 줘야함!!!!, 무조건 1개값만 반환가능함

부모함수가 자식함수에게 받는 인자는 30개까지 가능함


1.함수정의 : 함수를 만듦
3.함수선언 : 헤더를 복사해서 메인함수 위에 붙이고 세미콜론을 붙임
붙이는 이유 : //함수선언은 컴파일러에게 함수의 원형(형식)을 알린다.
	     //선언을 생략하면 컴파일러는 함수의 모든 인자를 int로 가정한다.
--> 선언 안하면 int인줄 아는데 void 같은게나오면 오류인줄알고 경고표시를 함


메인함수 위에 함수정의를 하면 함수선언을 생략해도 됨
라이브러리 함수는 헤더파일 쓸 것을 권장한다.

